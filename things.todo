Code tidy:
  ☐ HttpServer does not conform to the naming scheme for private methods uses camelCase rather than p_snake_case 
Tests:
  ☐ replace whiteacorn as a test server 
  ☐ find all test that are #if out of action and get them working or remove
  ☐ uri and uri-v2 - see below
  ☐ test trailers on message parsing and set/get of MessageBase
  ☐ test_buffers does no CHECK/REQUIRE anything
  ☐ message parsing needs to be clearer and also test continuation of headers
  ☐ proxy tunnel test required in addition to proxy_manual
  ☐ reduntant and duplicate tests - for example test_reader and test_reader_mock are the same ; delete obsolete - unnecessary tests
 ☐ devise a test that verifies that the entire proxy app works correctly at least on a simple example. Maybe use curl/wget to a know website to tests the output.
class property names cleanup:
  ☐ some tests are still using the leading _varname naming scheme - fix
Bugs:
  ☐ segfault in test_server_client_bb HIGH PRIORITY
  ☐ not handling non-existence of connection header correctly when preparing upstream request
  ☐ test_ssl seg faults
  ☐ potential - MessageWriter does not handle incomplete writes
  ☐ messagereader does not read trailers
  ☐ do not need a special modified version of http_parser as my parser incorrectly uses a modified on_headers_complete modify to use a standard http_parser but test thoroughly. NOTE - this mod is to capture the "raw" - not dechunked body maybe we dont need that any more.
  ☐ add shutdown write to connection and meassage rdr wrtr and research adding - peek for zero bytes to test a connection is open - this would be added to a reader.
  ☐ research how to test for keep-alive particulaly in regard to upper/lower case and also that more than one value can be on a line
Logging:
  ☐ is too complicated - try using the model from the node addin
Exceptions and Error checking:
  ☐ try taking the model from x509 and importing it into this project
Uri-UriV2:
  ☐ compare the two implementations and resolve into a single class. Check what tests get broken.
throw:
  ☐ replace all instance of throwing a string with THROW
Forwarding Handler:
  ☐ need to review how it handles errors - not sure what the ssl_handler should do in the case of downstream failure or upstream failure
Start work on SSL/TLS:
 ☐ Issue - need test bed to work on MessageReader, MessageWrite and Client for https requests.
 ☐ Plan
   ☐ Objective - get a working Client for https requests.
   ☐ SecureClient : make a new client cleed SecureClient based on existing non secure Client - that is because clients dont need to change to secure after creation.
      ☐ the Connect call will do both connect and handshake, and writes will continue to do connect/handshake if not already connected.
      ☐ the constructor will need to take additional paramters for access to a root certificate store. Dont want to use the default as want to ensure the store is in memory
   ☐ SecureClient Dependencies. 
       ☐ Needs testing Connection::becomeSecureClient(X509_Store* rootbundle) - must be able to upgrade to secure at least to be a secure client. New method
       ☐ Needs testing Connection::becomeSecureServer(Identity serverIdentity) - will not be needed by SecureClient but will be required for the proxy
   ☐ ISocket will all need becomeSecureClient() becomeSecureServer() methods as this absract class is the interface to Connection. 
   ☐ MessageReader MessageWriter: Probably do not need to be provided with these methods as these objects are constructed with connected ISockets.
   ☐ Consider doing away with ISocket all together - not sure what value it adds.
   ☐ Root certificate store, MitmBuild and X509 Identity - need a way of encapsulating and passing this info around 
＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Archive:
 ✔ convert tests to doctest @done (20-03-19 18:57) @project(Tests)
 ✔ Integrate libcert into marvin @done (20-03-04 12:23) @project(Start work on SSL/TLS)
 ✔ TCPConnection should probably become Connection as it will now be multi purpose http/https @done (20-03-04 12:22) @project(Start work on SSL/TLS)
 ✔ DONE - Issue - how to prevent duplication of the async_read and async_write code for the two flavors of sockets - possibly derive from a common abstract class @done (20-03-04 12:22) @project(Start work on SSL/TLS)
 ✔ test_client_server, test_proxy - needs to be done @done (20-03-04 12:21) @project(Tests convert to cmake)
 ✔ modify project files so that all includes are .... include <marvin/.......hpp>. This will require changes to cmake files, xcode project, lots of source files and before can do this need to reconcile namepaces with directory structure. @done (20-03-04 12:20) @project(Include organization)
 ✔ DECIDED NOT TO DO THIS - base on experience from cert_library its a pain having hpp and cpp in different directories --consider re-orging the header files into an include directory @done (20-03-04 12:20) @project(Vendor)
 ✔ do something with dependencies that have currently just been copied as source such a http_parser, simple_buffer @done (20-03-04 12:19) @project(Vendor)
 ✔ change "deps" to vendor and automate the acquiring of dependencies lile libcert - partially done - do not have scripts @done (20-03-04 12:19) @project(Vendor)
 ✔ should not be a singleton. Should also take an open ofstream @done (20-02-25 04:33) @project(Collector)
